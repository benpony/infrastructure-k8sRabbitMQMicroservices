#!/usr/bin/env groovy

def label = "docker-jenkins-${UUID.randomUUID().toString()}"

podTemplate(
    label: label,
    serviceAccount: 'jenkins',
    cloud: 'kubernetes',
    containers: [ 
        containerTemplate(
            name: 'docker', 
            image: 'docker', 
            command: 'cat', 
            resourceRequestCpu: '100m',
            resourceLimitCpu: '300m',
            resourceRequestMemory: '300Mi',
            resourceLimitMemory: '500Mi',
            ttyEnabled: true
        ),
        containerTemplate(
            name: 'helm-kubectl', 
            image: 'dtzar/helm-kubectl:latest', 
            command: 'cat', 
            resourceRequestCpu: '100m',
            resourceLimitCpu: '300m',
            resourceRequestMemory: '300Mi',
            resourceLimitMemory: '500Mi',
            ttyEnabled: true
        )
    ],
    volumes: [
        hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
    ]) {

    node(label) {
          
        container('docker') {   
            stage('Checkout Git and Docker Login') {
                timeout(time: 3, unit: 'MINUTES') {
                    checkout(
                        [
                            $class: 'GitSCM', 
                            branches: [
                                [name: '*/master']
                            ], 
                            doGenerateSubmoduleConfigurations: false, 
                            extensions: [], 
                            submoduleCfg: [], 
                            userRemoteConfigs: [
                                [url: 'https://github.com/benpony/infrastructure-k8sRabbitMQMicroservices.git']
                            ]
                        ]
                    )
                }
            }
        
            stage('Build and push Docker image') {
                withCredentials([
                    usernamePassword(
                        credentialsId: 'docker-hub', 
                        usernameVariable: 'DOCKERHUB_USER', 
                        passwordVariable: 'DOCKERHUB_PASSWORD'
                    )
                ]) {
                    sh script: "docker login -u  ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWORD}"
                }

                echo "Building docker image..."
                sh script: 'docker build ./producer -t benpony/py-producer'
                sh script: 'docker build ./consumer -t benpony/py-consumer'

                echo "Pushing docker image..."
                sh script: 'docker push benpony/py-consumer:latest'
                sh script: 'docker push benpony/py-producer:latest'
            }
        }

        container('helm-kubectl') {   
            stage('Deploying Applications') {
                // echo "Installing git"
                // sh script: 'sudo su - jenkins'
                // sh script: 'sudo apt-get update'
                // sh script: 'sudo apt-get install git'
                // sh script: 'git --version'

                echo "Adding Helm Chartmuseum dependencies"
                sh script: 'helm plugin install https://github.com/chartmuseum/helm-push'
                sh script: 'helm repo add chartmuseum http://localhost:32688'
                sh script: 'helm repo update'
                
                echo "Packeging helm charts..."
                sh script: 'helm package consumer/deployment/'
                sh script: 'helm package producer/deployment/'

                echo "Pushing helm charts..."
                sh script: 'helm push consumer/deployment/ chartmuseum'
                sh script: 'helm push producer/deployment/ chartmuseum' 

                echo "Deploying charts to cluster..."
                sh 'helm repo update'
                sh script: 'helm upgrade --install consumer chartmuseum/rmqapps-consumer'
                sh script: 'helm upgrade --install consumer chartmuseum/rmqapps-producer'
            }
        }
        
    }
}
