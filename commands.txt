$ minikube delete
$ minikube start --vm-driver=virtualbox --memory 4096 --cpus 2
$  minikube addons enable ingress

- - -

# install rabbitmq
https://github.com/bitnami/charts/
..
$ helm repo add bitnami https://charts.bitnami.com/bitnami
$ helm search repo bitnami | grep "rabbitmq"
$ helm install my-rmq bitnami/rabbitmq
$ helm delete my-rmq bitnami/rabbitmq

# install and set { user: admin pass: secretpassword }
```
$ helm install rmq \
  --set rabbitmq.username=admin,rabbitmq.password=secretpassword,rabbitmq.erlangCookie=secretcookie \
    stable/rabbitmq
```
## output
Credentials:

    echo "Username      : admin"
    echo "Password      : $(kubectl get secret --namespace default my-rmq-rabbitmq -o jsonpath="{.data.rabbitmq-password}" | base64 --decode)"
    echo "ErLang Cookie : $(kubectl get secret --namespace default my-rmq-rabbitmq -o jsonpath="{.data.rabbitmq-erlang-cookie}" | base64 --decode)"

RabbitMQ can be accessed within the cluster on port  at my-rmq-rabbitmq.default.svc.

To access for outside the cluster, perform the following steps:

To Access the RabbitMQ AMQP port:

    echo "URL : amqp://127.0.0.1:5672/"
    kubectl port-forward --namespace default svc/my-rmq-rabbitmq 5672:5672

To Access the RabbitMQ Management interface:

    echo "URL : http://127.0.0.1:15672/"
    kubectl port-forward --namespace default svc/my-rmq-rabbitmq 15672:15672
..

# build docker images
$ docker build -t <your username>/image-name .
$ docker image rm <your username>/image-name

```
/producer 
$ docker build -t benpony/py-producer . && \
  docker push benpony/py-producer:latest 

/consumer 
$ docker build -t benpony/py-consumer . && \
  docker push benpony/py-consumer:latest 
```

# deployment via helm install
$ helm install -f myvalues.yaml my-release-name .
$ helm install my-release-name .
$ helm uninstall my-release-name 

```
$ helm upgrade --install py-rmq-producer ./deployment
$ helm upgrade --install py-rmq-consumer ./deployment


$ helm uninstall py-rmq-producer && \
  helm install py-rmq-producer ./deployment
```


CI / CD
 - - - - - -
 install jenkins
 https://github.com/bitnami/charts/tree/master/bitnami/jenkins/#installing-the-chart

```
$ helm install jenkins jenkinsci/jenkins
```

##output
NAME: jenkins
LAST DEPLOYED: Sun Sep  6 13:21:32 2020
NAMESPACE: default
STATUS: deployed
REVISION: 1
NOTES:
1. Get your 'admin' user password by running:
  printf $(kubectl get secret --namespace default jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode);echo
2. Get the Jenkins URL to visit by running these commands in the same shell:
  export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/component=jenkins-master" -l "app.kubernetes.io/instance=jenkins" -o jsonpath="{.items[0].metadata.name}")
  echo http://127.0.0.1:8080
  kubectl --namespace default port-forward $POD_NAME 8080:8080

3. Login with the password from step 1 and the username: admin

4. Use Jenkins Configuration as Code by specifying configScripts in your values.yaml file, see documentation: http:///configuration-as-code and examples: https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos

For more information on running Jenkins on Kubernetes, visit:
https://cloud.google.com/solutions/jenkins-on-container-engine
For more information about Jenkins Configuration as Code, visit:
https://jenkins.io/projects/jcasc/


- - -
install chart on local cluster
https://github.com/avielb/k8s-experts/blob/master/helm/deploy-repository.txt
..
# assert valid chart
```
$ helm install test --debug --dry-run ./  
```

```
$ helm install chartmuseum -f chartmuseum-values.yaml stable/chartmuseum 
$ helm plugin install https://github.com/chartmuseum/helm-push
$ helm repo add chartmuseum http://$(minikube ip):32688
$ helm repo update
$ helm push mychart-0.1.0.tgz chartmuseum
```

## helm install output
NAME: chartmuseum
LAST DEPLOYED: Tue Sep  8 15:09:26 2020
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
** Please be patient while the chart is being deployed **

Get the ChartMuseum URL by running:

  export NODE_PORT=$(kubectl get --namespace default -o jsonpath="{.spec.ports[0].nodePort}" services chartmuseum-chartmuseum)
  export NODE_IP=$(kubectl get nodes --namespace default -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT/  

--> http://192.168.99.107:32688/

- - -
create, upload, pull, install chart
$ helm package deployment/
$ helm push deployment/ chartmuseum
$ helm repo update
$ helm pull chartmuseum/rmqapps-consumer
$ helm upgrade --install consumer chartmuseum/rmqapps-consumer

..

# give permissions for jenkins service account on default namespace
```
$ kubectl apply -f jenkins-cluster-role.yaml 
$ kubectl apply -f jenkins/jenkins-service-account.yaml 
$ kubectl create clusterrolebinding service-reader --clusterrole=service-reader --serviceaccount=default:jenkins
$ kubectl describe clusterrolebinding service-reader
```

#output
Name:         service-reader
Labels:       <none>
Annotations:  <none>
Role:
  Kind:  ClusterRole
  Name:  service-reader
Subjects:
  Kind            Name     Namespace
  ----            ----     ---------
  ServiceAccount  jenkins  default



